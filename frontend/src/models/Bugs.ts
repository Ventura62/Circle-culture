import { z } from "zod";

export const logBugTypeEnum = z.enum(["Bug", "Feature", "Question", "Other"]);
export const notificationMethodEnum = z.enum(["Email", "Phone", "Text", "None"]);
export const statusEnum = z.enum(["New", "InProgress", "Resolved", "Closed", "ClosedNoIssue", "ClosedDuplicate", "ClosedNotReproducible"]);
export const priorityEnum = z.enum(["Low", "Normal", "High", "Critical"]);

export const SchemaBugReportSubmission = z.object({
  type: logBugTypeEnum,
  autoGenerated: z.boolean().optional(),
  title: z.string().min(1, "Title is required"),
  description: z.string().min(1, "Description is required"),
  email: z.string().email().optional(),
  phone: z.string().optional(),
  notificationMethod: notificationMethodEnum,
  userId: z.string().optional(),
  logData: z.string().optional(),
  environmentData: z.string().optional(),
  additionalData: z.string().optional(),
  screenShot: z.string().optional(),
});

export const SchemaBugReportNote = z.object({
  id: z.string().min(1, "Note ID is required"),
  username: z.string().min(1, "Username is required"),
  note: z.string().optional(),
  created: z.date(),
});

export const SchemaBugReport = z.object({
  id: z.string().min(1, "ID is required"),
  autoGenerated: z.boolean().optional(),
  type: logBugTypeEnum.optional(),
  status: statusEnum.optional(),
  priority: priorityEnum.optional(),
  title: z.string().optional(),
  description: z.string().optional(),
  email: z.string().email().optional(),
  phone: z.string().optional(),
  notificationMethod: notificationMethodEnum.optional(),
  memberId: z.string().optional(),
  userId: z.string().optional(),
  logData: z.string().optional(),
  environmentData: z.string().optional(),
  additionalData: z.string().optional(),
  screenShot: z.string().optional(),
  created: z.string(),
  updated: z.string().optional(),
  resolved: z.string().optional(),
  notes: z.array(SchemaBugReportNote).optional(),
  isResolved: z.boolean().optional(),
  resolution: z.string().optional(),
});
export const getAllBugsResponseSchema = z.object({
  items: z.array(SchemaBugReport),
  totalRecords: z.number(),
});
export type BugReportSubmission = z.infer<typeof SchemaBugReportSubmission>;
export type BugReportNote = z.infer<typeof SchemaBugReportNote>;
export type BugReport = z.infer<typeof SchemaBugReport>;
export type GetAllBugsResponse = z.infer<typeof getAllBugsResponseSchema>;

export type LoggingList = {
  totalRecords: number;
  records: BugReport[];
};
