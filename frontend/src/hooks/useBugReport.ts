import axiosInstance from "@/config/axiosConfig";
import { BugReportSubmission } from "@/models/Bugs";
import { ServerErrorResponse, ServerResponse } from "@/models/ServerResponse";
import { User } from "@/models/User";
import { localStorageUtil } from "@/utils/LocalStorage";
import { TryParseJson } from "@/utils/TryParseJson";
import { NIL } from "uuid";

type LoggingHook = {
  actions: {
    addBug: (bug: BugReportSubmission) => Promise<void>;
  };
};
const WIDTH_XL = 1200;
const WIDTH_LG = 992;
const WIDTH_MD = 768;
const WIDTH_SM = 576;

const useBugReport = (): LoggingHook => {
  const userId = (localStorageUtil.getItem("user") as User)?.id || NIL;
  const window_data = window
    ? {
        width: window.innerWidth,
        height: window.innerHeight,
        xl: window.innerWidth >= WIDTH_XL,
        lg: window.innerWidth >= WIDTH_LG,
        md: window.innerWidth >= WIDTH_MD,
        sm: window.innerWidth >= WIDTH_SM,
        window: true,
      }
    : { width: 0, height: 0, xl: false, lg: false, md: false, sm: false, window: false };
  const screen_data =
    window && window.screen
      ? {
          ...window_data,
          orientation: window.screen.orientation?.type,
          pixelDepth: window.screen.pixelDepth,
          colorDepth: window.screen.colorDepth,
        }
      : { ...window_data, orientation: "unknown", pixelDepth: 0, colorDepth: 0 };

  const localStorageData = Object.keys(localStorage).reduce((acc, key) => {
    acc[key] = TryParseJson(localStorage.getItem(key) || "");
    return acc;
  }, {} as { [key: string]: unknown });

  const sessionStorageData = Object.keys(sessionStorage).reduce((acc, key) => {
    acc[key] = TryParseJson(sessionStorage.getItem(key) || "");
    return acc;
  }, {} as { [key: string]: unknown });

  const defaultInfo = {
    autoGenerated: false,
    userId: userId || "00000000-0000-0000-0000-000000000000",
    environmentData: JSON.stringify({
      location: window.location.href,
      screen: screen_data,
    }),
    additionalData: JSON.stringify({
      localStorage: localStorageData,
      sessionStorage: sessionStorageData,
      cookies: document.cookie,
    }),
  };

  const addBug = async (bug: BugReportSubmission) => {
    const dataToSend = {
      ...defaultInfo,
      ...bug,
      title: bug.title || "User submitted",
    };
    return axiosInstance
      .put<ServerResponse<null | ServerErrorResponse>>("/logging/bugreport", dataToSend)
      .then((res) => res.data)
      .then((data) => {
        if (data.okay) {
          return;
        } else {
          return Promise.reject(new Error(data.message));
        }
      })
      .catch((error) => {
        console.error(error);
        return;
      });
  };

  return { actions: { addBug } };
};

export default useBugReport;
